{"version":3,"file":"lexer.js","names":["_compat","require","feedPosition","position","str","len","start","index","end","i","char","charAt","line","column","jumpPosition","makeInitialPosition","copyPosition","lexer","options","state","tokens","lex","childlessTags","length","lexText","isComment","startsWith","lexComment","tagName","lexTag","safeTag","toLowerCase","arrayIncludes","lexSkipTag","alphanumeric","findTextEnd","textEnd","indexOf","test","type","content","slice","push","contentEnd","commentEnd","secondChar","close","lexTagName","lexTagAttributes","firstChar","whitespace","isWhitespaceChar","isTagChar","cursor","quote","wordBegin","words","isQuoteEnd","isTagEnd","isWordEnd","isQuoteStart","wLen","word","isNotPair","secondWord","newWord","thirdWord","endsWith","stringIncludes","safeTagName","nextTag","tagStartPosition","tagState","name","textStart","apply"],"sources":["lexer.js"],"sourcesContent":["import { startsWith, endsWith, stringIncludes, arrayIncludes } from './compat'\n\nexport function feedPosition(position, str, len) {\n  const start = position.index\n  const end = (position.index = start + len)\n  for (let i = start; i < end; i++) {\n    const char = str.charAt(i)\n    if (char === '\\n') {\n      position.line++\n      position.column = 0\n    } else {\n      position.column++\n    }\n  }\n}\n\nexport function jumpPosition(position, str, end) {\n  const len = end - position.index\n  return feedPosition(position, str, len)\n}\n\nexport function makeInitialPosition() {\n  return {\n    index: 0,\n    column: 0,\n    line: 0,\n  }\n}\n\nexport function copyPosition(position) {\n  return {\n    index: position.index,\n    line: position.line,\n    column: position.column,\n  }\n}\n\nexport default function lexer(str, options) {\n  const state = {\n    str,\n    options,\n    position: makeInitialPosition(),\n    tokens: [],\n  }\n  lex(state)\n  return state.tokens\n}\n\nexport function lex(state) {\n  const {\n    str,\n    options: { childlessTags },\n  } = state\n  const len = str.length\n  while (state.position.index < len) {\n    const start = state.position.index\n    lexText(state)\n    if (state.position.index === start) {\n      const isComment = startsWith(str, '!--', start + 1)\n      if (isComment) {\n        lexComment(state)\n      } else {\n        const tagName = lexTag(state)\n        const safeTag = tagName.toLowerCase()\n        if (arrayIncludes(childlessTags, safeTag)) {\n          lexSkipTag(tagName, state)\n        }\n      }\n    }\n  }\n}\n\nconst alphanumeric = /[A-Za-z0-9]/\nexport function findTextEnd(str, index) {\n  while (true) {\n    const textEnd = str.indexOf('<', index)\n    if (textEnd === -1) {\n      return textEnd\n    }\n    const char = str.charAt(textEnd + 1)\n    if (char === '/' || char === '!' || alphanumeric.test(char)) {\n      return textEnd\n    }\n    index = textEnd + 1\n  }\n}\n\nexport function lexText(state) {\n  const type = 'text'\n  const { str, position } = state\n  let textEnd = findTextEnd(str, position.index)\n  if (textEnd === position.index) return\n  if (textEnd === -1) {\n    textEnd = str.length\n  }\n\n  const start = copyPosition(position)\n  const content = str.slice(position.index, textEnd)\n  jumpPosition(position, str, textEnd)\n  const end = copyPosition(position)\n  state.tokens.push({ type, content, position: { start, end } })\n}\n\nexport function lexComment(state) {\n  const { str, position } = state\n  const start = copyPosition(position)\n  feedPosition(position, str, 4) // \"<!--\".length\n  let contentEnd = str.indexOf('-->', position.index)\n  let commentEnd = contentEnd + 3 // \"-->\".length\n  if (contentEnd === -1) {\n    contentEnd = commentEnd = str.length\n  }\n\n  const content = str.slice(position.index, contentEnd)\n  jumpPosition(position, str, commentEnd)\n  state.tokens.push({\n    type: 'comment',\n    content,\n    position: {\n      start,\n      end: copyPosition(position),\n    },\n  })\n}\n\nexport function lexTag(state) {\n  const { str, position } = state\n  {\n    const secondChar = str.charAt(position.index + 1)\n    const close = secondChar === '/'\n    const start = copyPosition(position)\n    feedPosition(position, str, close ? 2 : 1)\n    state.tokens.push({ type: 'tag-start', close, position: { start } })\n  }\n  const tagName = lexTagName(state)\n  lexTagAttributes(state)\n  {\n    const firstChar = str.charAt(position.index)\n    const close = firstChar === '/'\n    feedPosition(position, str, close ? 2 : 1)\n    const end = copyPosition(position)\n    state.tokens.push({ type: 'tag-end', close, position: { end } })\n  }\n  return tagName\n}\n\n// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space\nconst whitespace = /\\s/\nexport function isWhitespaceChar(char) {\n  return whitespace.test(char)\n}\n\nexport function lexTagName(state) {\n  const { str, position } = state\n  const len = str.length\n  let start = position.index\n  while (start < len) {\n    const char = str.charAt(start)\n    const isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>')\n    if (isTagChar) break\n    start++\n  }\n\n  let end = start + 1\n  while (end < len) {\n    const char = str.charAt(end)\n    const isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>')\n    if (!isTagChar) break\n    end++\n  }\n\n  jumpPosition(position, str, end)\n  const tagName = str.slice(start, end)\n  state.tokens.push({\n    type: 'tag',\n    content: tagName,\n  })\n  return tagName\n}\n\nexport function lexTagAttributes(state) {\n  const { str, position, tokens } = state\n  let cursor = position.index\n  let quote = null // null, single-, or double-quote\n  let wordBegin = cursor // index of word start\n  const words = [] // \"key\", \"key=value\", \"key='value'\", etc\n  const len = str.length\n  while (cursor < len) {\n    const char = str.charAt(cursor)\n    if (quote) {\n      const isQuoteEnd = char === quote\n      if (isQuoteEnd) {\n        quote = null\n      }\n      cursor++\n      continue\n    }\n\n    const isTagEnd = char === '/' || char === '>'\n    if (isTagEnd) {\n      if (cursor !== wordBegin) {\n        words.push(str.slice(wordBegin, cursor))\n      }\n      break\n    }\n\n    const isWordEnd = isWhitespaceChar(char)\n    if (isWordEnd) {\n      if (cursor !== wordBegin) {\n        words.push(str.slice(wordBegin, cursor))\n      }\n      wordBegin = cursor + 1\n      cursor++\n      continue\n    }\n\n    const isQuoteStart = char === \"'\" || char === '\"'\n    if (isQuoteStart) {\n      quote = char\n      cursor++\n      continue\n    }\n\n    cursor++\n  }\n  jumpPosition(position, str, cursor)\n\n  const wLen = words.length\n  const type = 'attribute'\n  for (let i = 0; i < wLen; i++) {\n    const word = words[i]\n    const isNotPair = word.indexOf('=') === -1\n    if (isNotPair) {\n      const secondWord = words[i + 1]\n      if (secondWord && startsWith(secondWord, '=')) {\n        if (secondWord.length > 1) {\n          const newWord = word + secondWord\n          tokens.push({ type, content: newWord })\n          i += 1\n          continue\n        }\n        const thirdWord = words[i + 2]\n        i += 1\n        if (thirdWord) {\n          const newWord = word + '=' + thirdWord\n          tokens.push({ type, content: newWord })\n          i += 1\n          continue\n        }\n      }\n    }\n    if (endsWith(word, '=')) {\n      const secondWord = words[i + 1]\n      if (secondWord && !stringIncludes(secondWord, '=')) {\n        const newWord = word + secondWord\n        tokens.push({ type, content: newWord })\n        i += 1\n        continue\n      }\n\n      const newWord = word.slice(0, -1)\n      tokens.push({ type, content: newWord })\n      continue\n    }\n\n    tokens.push({ type, content: word })\n  }\n}\n\nconst push = [].push\n\nexport function lexSkipTag(tagName, state) {\n  const { str, position, tokens } = state\n  const safeTagName = tagName.toLowerCase()\n  const len = str.length\n  let index = position.index\n  while (index < len) {\n    const nextTag = str.indexOf('</', index)\n    if (nextTag === -1) {\n      lexText(state)\n      break\n    }\n\n    const tagStartPosition = copyPosition(position)\n    jumpPosition(tagStartPosition, str, nextTag)\n    const tagState = { str, position: tagStartPosition, tokens: [] }\n    const name = lexTag(tagState)\n    if (safeTagName !== name.toLowerCase()) {\n      index = tagState.position.index\n      continue\n    }\n\n    if (nextTag !== position.index) {\n      const textStart = copyPosition(position)\n      jumpPosition(position, str, nextTag)\n      tokens.push({\n        type: 'text',\n        content: str.slice(textStart.index, nextTag),\n        position: {\n          start: textStart,\n          end: copyPosition(position),\n        },\n      })\n    }\n\n    push.apply(tokens, tagState.tokens)\n    jumpPosition(position, str, tagState.position.index)\n    break\n  }\n}\n"],"mappings":"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"}